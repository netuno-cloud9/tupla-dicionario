# -*- coding: utf-8 -*-
"""Exercício de Fixação (Tupla e Dicionario).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3lfAKX7vcIlR2GHyyV9IGxtxT8_IckJ

1.Crie um dicionário d e coloque nele seus dados: nome, idade,
telefone,endereço. Usando o dicionário d criado anteriormente, imprima
seu nome.
"""

d = {
    "nome": "Paulo Victor",
    "idade": 34,
    "telefone": "666-3698",
    "endereço": "Rua Araci 1155, Jardim Cruzeiro, Ba, Brasil"
}

print(d.get("nome"))

"""2. Crie um dicionário d e coloque nele os dados fornecidos pelo usuário:
nome, idade, telefone,endereço. Também usando d, imprima todos os
itens do dicionário no formato chave : valor, ordenado pela chave
"""

d = {}

nome = input('Digite seu nome: ')
idade = input('Digite sua idade: ')
telefone = input('Digite seu telefone: ')
endereço = input('Digite seu endereço: ')

d['nome'] = nome
d['idade'] = idade
d['telefone'] = telefone
d['endereço'] = endereço

items = d.items()

print(items)
#for chave, valor in d.items():
    #print(f'{chave}: {valor}')

"""3. Crie um dicionário que é uma agenda e coloque nele os seguintes dados:
chave (cpf), nome, idade, telefone. O programa deve ler um número
indeterminado de dados, criar a agenda e imprimir todos os itens do
dicionário no formato chave: nome-idadefone.
"""

agenda = {}

while True:
    chave = input("Entre com o CPF (9 dígitos): ")
    nome = input("Entre com o nome: ")
    idade = input("Entre com a idade: ")
    telefone = input("Entre com o telefone (ddd + número): ")

    agenda[chave] = nome, idade, telefone

    print("Dados adicionados com sucesso!")

    resp = input("Deseja adicionar outro registro? (sim/não): ")
    if resp.lower() == 'nao' or 'N':
        print(agenda)
        break

"""4. Crie um programa que cadastre informações de várias pessoas (nome,
idade e cpf) e depois coloque em um dicionário. Depois remova todas as
pessoas menores de 18 anos do dicionário e coloque em outro dicionário.
"""

# Define dois dicionários para armazenar as informações
pessoas = {}
pessoas_menores = {}

x = int(input("quantas pessoas deseja cadastrar?"))

# Cadastra as informações das pessoas
for i in range(x):
    nome = input(f"Entre com o nome da pessoa {i+1}: ")
    idade = int(input(f"Entre com a idade da pessoa {i+1}: "))
    cpf = input(f"Entre com o CPF da pessoa {i+1}: ")

    # Adiciona as informações às pessoas
    pessoas[cpf] = nome, idade

    # Verifica se a pessoa é menor de 18 anos e adiciona às pessoas menores se for
    if idade < 18:
        pessoas_menores[cpf] = nome, idade

# Remove as pessoas menores de 18 anos do dicionário de pessoas
for cpf, valor in pessoas_menores.items():
    del pessoas[cpf]

# Imprime as informações das pessoas
print("Pessoas com mais de 18 anos:")
for cpf, valor in pessoas.items():
    print(f"{cpf}: {valor[0]}-{valor[1]}")

# Imprime as informações das pessoas menores de 18 anos
print("\nPessoas menores de 18 anos:")
for cpf, valor in pessoas_menores.items():
    print(f"{cpf}: {valor[0]}-{valor[1]}")

"""5. Considere um sistema onde os dados são armazenados em dicionários.
Nesse sistema existe um dicionario principal e o dicionário de backup.
Cada vez que o dicionário principal atinge tamanho 5, ele imprime os
dados na tela e apaga o seu conteúdo. Crie um programa que insira dados
em um dicionário, realizando o backup a cada dado e excluindo os dados
do dicionário principal quando ele atingir tamanho 5.
"""

def realizar_backup(dicionario_principal, dicionario_backup):
    print("Realizando backup dos dados:", dicionario_principal)
    dicionario_backup.update(dicionario_principal)
    dicionario_principal.clear()

dicionario_principal = {}
dicionario_backup = {}


while True:
    chave = input("Digite a chave (ou 'sair' para encerrar): ")
    if chave == "sair":
        break

    valor = input("Digite o valor correspondente: ")
    dicionario_principal[chave] = valor

    if len(dicionario_principal) == 5:
        realizar_backup(dicionario_principal, dicionario_backup)


print("Dicionário de backup final:", dicionario_backup)

"""6. Escreva uma função que conta a quantidade de vogais em um texto e
armazena tal quantidade em um dicionário, onde a chave é a vogal
considerada.
"""

def contar_vogais(texto):
    vogais = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}

    for letra in texto.lower():
        if letra in vogais:
            vogais[letra] += 1

    return vogais

palavra = input('digite uma palavra')
contar_vogais(palavra)

"""7. Escreva um programa que lê duas notas de vários alunos e armazena tais
notas em um dicionário, onde a chave é o nome do aluno. A entrada de
dados deve terminar quando for lida uma string vazia como nome.
Escreva uma função que retorna a média do aluno, dado seu nome.
"""

def calcular_media_aluno(notas, nome_aluno):
    if nome_aluno in notas:
        notas_aluno = notas[nome_aluno]
        media = sum(notas_aluno) / len(notas_aluno)
        return media
    else:
        return None

notas = {}

while True:
    nome = input("Digite o nome do aluno (ou deixe em branco para encerrar): ")
    if nome == "":
        break

    nota1 = float(input("Digite a primeira nota: "))
    nota2 = float(input("Digite a segunda nota: "))

    notas[nome] = [nota1, nota2]

nome_aluno = input("Digite o nome do aluno para calcular a média: ")
media_aluno = calcular_media_aluno(notas, nome_aluno)

if media_aluno is not None:
    print("A média do aluno", nome_aluno, "é:", media_aluno)
else:
    print("Aluno não encontrado.")

"""8. Uma pista de Kart permite 10 voltas para cada um de 6 corredores.
Escreva um programa que leia todos os tempos em segundos e os guarde
em um dicionário, onde a chave é o nome do corredor. Ao final diga de
quem foi a melhor volta da prova e em que volta; e ainda a classificação
final em ordem (1o o campeão). O campeão é o que tem a menor média
de tempos.
"""

def calcular_media_tempos(tempos):
    total_tempos = sum(tempos)
    media = total_tempos / len(tempos)
    return media

def encontrar_melhor_volta(tempos):
    melhor_volta = min(tempos)
    volta = tempos.index(melhor_volta) + 1
    return melhor_volta, volta

def classificar_corredores(tempos):
    classificacao = sorted(tempos, key=tempos.get)
    return classificacao

corredores = {}
voltas = 10
num_corredores = 6

for i in range(num_corredores):
    nome = input("Digite o nome do corredor: ")
    tempos = []
    for volta in range(voltas):
        tempo = float(input(f"Digite o tempo da volta {volta+1}: "))
        tempos.append(tempo)
    corredores[nome] = tempos

melhor_volta, volta_melhor_volta = encontrar_melhor_volta([
    tempo for tempos in corredores.values() for tempo in tempos
])

classificacao = classificar_corredores({
    corredor: calcular_media_tempos(tempos) for corredor, tempos in corredores.items()
})

print("Melhor volta da prova:")
print("Corredor:", classificacao[0])
print("Volta:", volta_melhor_volta)

print("\nClassificação final:")
for posicao, corredor in enumerate(classificacao, start=1):
    print(f"{posicao}º lugar: {corredor}")